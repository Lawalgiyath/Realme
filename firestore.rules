
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an authenticated, non-anonymous user.
    function isSignedIn() {
      return request.auth != null && request.auth.token.firebase.sign_in_provider != 'anonymous';
    }

    // Helper function to check if a user is the owner of a document.
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // A user can create, read, update, and delete their own document.
      // An organization leader can read the data of users in their organization.
      allow read: if isOwner(userId) || 
                   (get(/databases/$(database)/documents/organizations/$(resource.data.organizationId)).data.leaderUid == request.auth.uid);
      allow create, update, delete: if isOwner(userId);
    }

    // Rules for the 'organizations' collection
    match /organizations/{orgId} {
        // Any signed-in user can read an organization document (to verify the code).
        allow read: if request.auth != null;
        // Only the designated leader can create or update their organization's document.
        allow create, update: if request.auth.uid == request.resource.data.leaderUid;
    }
    
    // Rules for the 'community-stories' collection
    match /community-stories/{storyId} {
        // Any authenticated, non-anonymous user can create a story.
        allow create: if isSignedIn();
        // Any authenticated user (including anonymous guests) can read stories.
        allow read: if request.auth != null;
    }
  }
}
